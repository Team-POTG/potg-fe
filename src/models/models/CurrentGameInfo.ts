/* tslint:disable */
/* eslint-disable */
/**
 * POTG
 * POTG RestAPI Document
 *
 * The version of the OpenAPI document: BETA1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BannedChampion } from './BannedChampion';
import {
    BannedChampionFromJSON,
    BannedChampionFromJSONTyped,
    BannedChampionToJSON,
} from './BannedChampion';
import type { CurrentGameParticipant } from './CurrentGameParticipant';
import {
    CurrentGameParticipantFromJSON,
    CurrentGameParticipantFromJSONTyped,
    CurrentGameParticipantToJSON,
} from './CurrentGameParticipant';
import type { Observer } from './Observer';
import {
    ObserverFromJSON,
    ObserverFromJSONTyped,
    ObserverToJSON,
} from './Observer';

/**
 * 
 * @export
 * @interface CurrentGameInfo
 */
export interface CurrentGameInfo {
    /**
     * 
     * @type {number}
     * @memberof CurrentGameInfo
     */
    gameId: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentGameInfo
     */
    gameType: string;
    /**
     * 
     * @type {number}
     * @memberof CurrentGameInfo
     */
    gameStartTime: number;
    /**
     * 
     * @type {number}
     * @memberof CurrentGameInfo
     */
    mapId: number;
    /**
     * 
     * @type {number}
     * @memberof CurrentGameInfo
     */
    gameLength: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentGameInfo
     */
    platformId: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentGameInfo
     */
    gameMode: string;
    /**
     * 
     * @type {Array<BannedChampion>}
     * @memberof CurrentGameInfo
     */
    bannedChampions: Array<BannedChampion>;
    /**
     * 
     * @type {number}
     * @memberof CurrentGameInfo
     */
    gameQueueConfigId: number;
    /**
     * 
     * @type {Observer}
     * @memberof CurrentGameInfo
     */
    observers: Observer;
    /**
     * 
     * @type {Array<CurrentGameParticipant>}
     * @memberof CurrentGameInfo
     */
    participants: Array<CurrentGameParticipant>;
}

/**
 * Check if a given object implements the CurrentGameInfo interface.
 */
export function instanceOfCurrentGameInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "gameId" in value;
    isInstance = isInstance && "gameType" in value;
    isInstance = isInstance && "gameStartTime" in value;
    isInstance = isInstance && "mapId" in value;
    isInstance = isInstance && "gameLength" in value;
    isInstance = isInstance && "platformId" in value;
    isInstance = isInstance && "gameMode" in value;
    isInstance = isInstance && "bannedChampions" in value;
    isInstance = isInstance && "gameQueueConfigId" in value;
    isInstance = isInstance && "observers" in value;
    isInstance = isInstance && "participants" in value;

    return isInstance;
}

export function CurrentGameInfoFromJSON(json: any): CurrentGameInfo {
    return CurrentGameInfoFromJSONTyped(json, false);
}

export function CurrentGameInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentGameInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gameId': json['gameId'],
        'gameType': json['gameType'],
        'gameStartTime': json['gameStartTime'],
        'mapId': json['mapId'],
        'gameLength': json['gameLength'],
        'platformId': json['platformId'],
        'gameMode': json['gameMode'],
        'bannedChampions': ((json['bannedChampions'] as Array<any>).map(BannedChampionFromJSON)),
        'gameQueueConfigId': json['gameQueueConfigId'],
        'observers': ObserverFromJSON(json['observers']),
        'participants': ((json['participants'] as Array<any>).map(CurrentGameParticipantFromJSON)),
    };
}

export function CurrentGameInfoToJSON(value?: CurrentGameInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gameId': value.gameId,
        'gameType': value.gameType,
        'gameStartTime': value.gameStartTime,
        'mapId': value.mapId,
        'gameLength': value.gameLength,
        'platformId': value.platformId,
        'gameMode': value.gameMode,
        'bannedChampions': ((value.bannedChampions as Array<any>).map(BannedChampionToJSON)),
        'gameQueueConfigId': value.gameQueueConfigId,
        'observers': ObserverToJSON(value.observers),
        'participants': ((value.participants as Array<any>).map(CurrentGameParticipantToJSON)),
    };
}

