/* tslint:disable */
/* eslint-disable */
/**
 * POTG Summoner v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../../base";
// @ts-ignore
import { FailResponse } from "../../model";
// @ts-ignore
import { MatchEntity } from "../../model";
// @ts-ignore
import { SummonerDto } from "../../model";
/**
 * SummonerApi - axios parameter creator
 * @export
 */
export const SummonerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} puuid
     * @param {string} region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMatches: async (
      puuid: string,
      region: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'puuid' is not null or undefined
      assertParamExists("getMatches", "puuid", puuid);
      // verify required parameter 'region' is not null or undefined
      assertParamExists("getMatches", "region", region);
      const localVarPath = `/api/potg-lol/summoner/{region}/{puuid}/matches`
        .replace(`{${"puuid"}}`, encodeURIComponent(String(puuid)))
        .replace(`{${"region"}}`, encodeURIComponent(String(region)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} summonerName
     * @param {string} region
     * @param {boolean} [reFetch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummoner: async (
      summonerName: string,
      region: string,
      reFetch?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'summonerName' is not null or undefined
      assertParamExists("getSummoner", "summonerName", summonerName);
      // verify required parameter 'region' is not null or undefined
      assertParamExists("getSummoner", "region", region);
      const localVarPath =
        `/api/potg-lol/summoner/{region}/by-name/{summonerName}`
          .replace(
            `{${"summonerName"}}`,
            encodeURIComponent(String(summonerName))
          )
          .replace(`{${"region"}}`, encodeURIComponent(String(region)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (reFetch !== undefined) {
        localVarQueryParameter["reFetch"] = reFetch;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SummonerApi - functional programming interface
 * @export
 */
export const SummonerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SummonerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} puuid
     * @param {string} region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMatches(
      puuid: string,
      region: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MatchEntity>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMatches(
        puuid,
        region,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} summonerName
     * @param {string} region
     * @param {boolean} [reFetch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSummoner(
      summonerName: string,
      region: string,
      reFetch?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummonerDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSummoner(
        summonerName,
        region,
        reFetch,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SummonerApi - factory interface
 * @export
 */
export const SummonerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SummonerApiFp(configuration);
  return {
    /**
     *
     * @param {string} puuid
     * @param {string} region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMatches(
      puuid: string,
      region: string,
      options?: any
    ): AxiosPromise<Array<MatchEntity>> {
      return localVarFp
        .getMatches(puuid, region, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} summonerName
     * @param {string} region
     * @param {boolean} [reFetch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummoner(
      summonerName: string,
      region: string,
      reFetch?: boolean,
      options?: any
    ): AxiosPromise<SummonerDto> {
      return localVarFp
        .getSummoner(summonerName, region, reFetch, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SummonerApi - object-oriented interface
 * @export
 * @class SummonerApi
 * @extends {BaseAPI}
 */
export class SummonerApi extends BaseAPI {
  /**
   *
   * @param {string} puuid
   * @param {string} region
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SummonerApi
   */
  public getMatches(
    puuid: string,
    region: string,
    options?: AxiosRequestConfig
  ) {
    return SummonerApiFp(this.configuration)
      .getMatches(puuid, region, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} summonerName
   * @param {string} region
   * @param {boolean} [reFetch]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SummonerApi
   */
  public getSummoner(
    summonerName: string,
    region: string,
    reFetch?: boolean,
    options?: AxiosRequestConfig
  ) {
    return SummonerApiFp(this.configuration)
      .getSummoner(summonerName, region, reFetch, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
